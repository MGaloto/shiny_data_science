MSFTdis = round( ( MSFT$Close[length(MSFT$Close)] - MSFT$Close[length(MSFT$Close) - 5] ) / MSFT$Close[length(MSFT$Close) - 5] ,4)*100
GOOGLdis = round( ( GOOGL$Close[length(GOOGL$Close)] - GOOGL$Close[length(GOOGL$Close) - 5] ) / GOOGL$Close[length(GOOGL$Close) - 5] ,4)*100
AAPLdis = round( ( AAPL$Close[length(AAPL$Close)] - AAPL$Close[length(AAPL$Close) - 5] ) / AAPL$Close[length(AAPL$Close) - 5] ,4)*100
AMZNdis = round( ( AMZN$Close[length(AMZN$Close)] - AMZN$Close[length(AMZN$Close) - 5] ) / AMZN$Close[length(AMZN$Close) - 5] ,4)*100
# --------------------------------------------------------------------------------------- #
# Se crea un data frame con los valores de las variaciones
acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Distancias = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(acciones, Distancias) %>% arrange(-Distancias)
View(df)
GOOGL$fechas = as.Date(paste(GOOGL$date,"-01",sep=""))
MSFT$fechas = as.Date(paste(MSFT$date,"-01",sep=""))
AAPL$fechas = as.Date(paste(AAPL$date,"-01",sep=""))
AMZN$fechas = as.Date(paste(AMZN$date,"-01",sep=""))
# --------------------------------------------------------------------------------------- #
# Data Frame promedio mensual
AAPL_MES = AAPL %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
AMZN_MES = AMZN %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
MSFT_MES = MSFT %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
GOOGL_MES = GOOGL %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
# --------------------------------------------------------------------------------------- #
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
bar_plot
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)]
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default)
round((AAPL$Close[AAPL$Fecha == '2017-05-18'] - AAPL$Close[AAPL$Fecha == '2012-01-16'])  / AAPL$Close[AAPL$Fecha == '2012-01-16'],4)*100
runApp()
runApp()
runApp()
library(corrplot)
library(quantmod)
library(highcharter)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(crayon)
library(modeest)
library(readxl)
library(plotly)
library(ggthemes)
library(reshape)
library(viridisLite)
library(viridis)
library(shinyWidgets)
library(lubridate)
# --------------------------------------------------------------------------------------- #
# Importar acciones
AAPL=as.data.frame(getSymbols("AAPL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
AMZN=as.data.frame(getSymbols("AMZN" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
MSFT=as.data.frame(getSymbols("MSFT" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
GOOGL=as.data.frame(getSymbols("GOOGL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
View(MSFT)
# Se agregan las Fechas como variables
AAPL$Fecha <- row.names(AAPL)
AMZN$Fecha <- row.names(AMZN)
MSFT$Fecha <- row.names(MSFT)
GOOGL$Fecha <- row.names(GOOGL)
# --------------------------------------------------------------------------------------- #
# Se mofidican las columnas
colnames(AAPL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(AMZN) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(MSFT) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(GOOGL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
# --------------------------------------------------------------------------------------- #
# Se numeran las filas
rownames(AAPL) = 1:nrow(AAPL)
rownames(AMZN) = 1:nrow(AMZN)
rownames(MSFT) = 1:nrow(MSFT)
rownames(GOOGL) = 1:nrow(GOOGL)
# --------------------------------------------------------------------------------------- #
# Fechas formatos
GOOGL$Fecha = as.Date(GOOGL$Fecha)
AAPL$Fecha = as.Date(AAPL$Fecha)
AMZN$Fecha = as.Date(AMZN$Fecha)
MSFT$Fecha = as.Date(MSFT$Fecha)
# --------------------------------------------------------------------------------------- #
# Variables de prueba
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
# --------------------------------------------------------------------------------------- #
# Editando las fechas
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)]
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/maxig/Desktop/Carpetas/Cursos/Udemy/Shiny Apps in R/app5/app6.R')
runApp('C:/Users/maxig/Desktop/Carpetas/Cursos/Udemy/Shiny Apps in R/app5/app5.R')
runApp('C:/Users/maxig/Desktop/Carpetas/Cursos/Udemy/Shiny Apps in R/app4/app4.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(AirPassengers)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('appdoblegraph.R')
runApp()
View(MSFT)
MSFTvol = MSFT %>% subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))
subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05")
MSFTvol = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))
View(MSFTvol)
View(MSFTvol)
MSFTvol = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))[1]
View(MSFTvol)
MSFTvol = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))[1,]
MSFTvol = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))[,1]
MSFTvol[1]
sbst = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05")
View(sbst)
MSFTvol = MSFTvol$volumen
MSFTvol
MSFTvol = subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen))$volumen
MSFTvol = (subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
MSFTvol
MSFTvol = (subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
GOOGLvol = (subset(GOOGL, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
AAPLvol = (subset(AAPL, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
AMZNvol = (subset(AMZN, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
Acciones_vol = c(
"GOOGL_vol",
"MSFT_vol",
"AAPL_vol",
"AMZN_vol")
Acumulado_vol = c(
GOOGLvol,
MSFTvol,
AAPLvol,
AMZNvol)
df_vol = data.frame(Acciones_vol, Acumulado_vol) %>% arrange(-Acumulado_vol)
View(df_vol)
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado </b>  {point.percentage:,.2f}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
Acciones_vol = c(
"GOOGL Volumen",
"MSFT Volumen",
"AAPL Volumen",
"AMZN Volumen")
Acumulado_vol = c(
GOOGLvol,
MSFTvol,
AAPLvol,
AMZNvol)
df_vol = data.frame(Acciones_vol, Acumulado_vol) %>% arrange(-Acumulado_vol)
# --------------------------------------------------------------------------------------- #
# Pie Chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado </b>  {point.percentage:,.2f}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado </b>  {y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::cividis)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::mako(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::cividis(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::magma(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::rocket(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_credits(enabled = TRUE, text = '@MGaloto')
pie_chart
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
# Server code used for all examples
server <- function(input, output) {
output$plot1 <- renderPlot(plot(cars))
output$plot2 <- renderPlot(plot(pressure))
output$plot3 <- renderPlot(plot(AirPassengers))
}
# Equal sizing
ui <- splitLayout(
plotOutput("plot1"),
plotOutput("plot2")
)
shinyApp(ui, server)
# Custom widths
ui <- splitLayout(cellWidths = c("25%", "75%"),
plotOutput("plot1"),
plotOutput("plot2")
)
shinyApp(ui, server)
# All cells at 300 pixels wide, with cell padding
# and a border around everything
ui <- splitLayout(
style = "border: 1px solid silver;",
cellWidths = 300,
cellArgs = list(style = "padding: 6px"),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::rocket(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff"))
pie_chart
runApp()
runApp()
View(MSFT)
runApp()
default
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(corrplot)
library(quantmod)
library(highcharter)
library(tidyr)
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(crayon)
library(modeest)
library(readxl)
library(plotly)
library(ggthemes)
library(reshape)
library(viridisLite)
library(viridis)
library(shinyWidgets)
library(lubridate)
# --------------------------------------------------------------------------------------- #
# Importar acciones
AAPL=as.data.frame(getSymbols("AAPL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
AMZN=as.data.frame(getSymbols("AMZN" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
MSFT=as.data.frame(getSymbols("MSFT" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
GOOGL=as.data.frame(getSymbols("GOOGL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
# --------------------------------------------------------------------------------------- #
# Se agregan las Fechas como variables
AAPL$Fecha <- row.names(AAPL)
AMZN$Fecha <- row.names(AMZN)
MSFT$Fecha <- row.names(MSFT)
GOOGL$Fecha <- row.names(GOOGL)
# --------------------------------------------------------------------------------------- #
# Se mofidican las columnas
colnames(AAPL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(AMZN) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(MSFT) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(GOOGL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
# --------------------------------------------------------------------------------------- #
# Se numeran las filas
rownames(AAPL) = 1:nrow(AAPL)
rownames(AMZN) = 1:nrow(AMZN)
rownames(MSFT) = 1:nrow(MSFT)
rownames(GOOGL) = 1:nrow(GOOGL)
# --------------------------------------------------------------------------------------- #
# Fechas formatos
GOOGL$Fecha = as.Date(GOOGL$Fecha)
AAPL$Fecha = as.Date(AAPL$Fecha)
AMZN$Fecha = as.Date(AMZN$Fecha)
MSFT$Fecha = as.Date(MSFT$Fecha)
# --------------------------------------------------------------------------------------- #
# Variables de prueba
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
# --------------------------------------------------------------------------------------- #
# Editando las fechas
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)]
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default)
# --------------------------------------------------------------------------------------- #
# Volumen acumulado
MSFTvol = (subset(MSFT, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
GOOGLvol = (subset(GOOGL, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
AAPLvol = (subset(AAPL, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
AMZNvol = (subset(AMZN, Fecha >= "2022-01-03" & Fecha <= "2022-01-05") %>% summarise(volumen = sum(Volumen)))$volumen
Acciones_vol = c(
"GOOGL Volumen",
"MSFT Volumen",
"AAPL Volumen",
"AMZN Volumen")
Acumulado_vol = c(
GOOGLvol,
MSFTvol,
AAPLvol,
AMZNvol)
df_vol = data.frame(Acciones_vol, Acumulado_vol) %>% arrange(-Acumulado_vol)
# --------------------------------------------------------------------------------------- #
# Pie Chart
pie_chart = df_vol %>%
hchart('pie', hcaes(x = Acciones_vol, y = Acumulado_vol, color = viridis::rocket(n = 4))) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b> Sumatoria de Volumen Operado en USD: </b>  {point.y}') %>%
hc_title(text = 'Pie Chart participacion Volumen Operado',
style = list(fontSize = '15px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Volumen',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff"))
runApp()
