start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
runApp()
runApp()
View(AAPL)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "yy/mm",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "yy/mm",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
View(AAPL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(corrplot)
library(quantmod)
library(highcharter)
library(tidyr)
library(miscset)
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(crayon)
library(modeest)
library(readxl)
library(plotly)
library(ggthemes)
library(reshape)
library(viridisLite)
library(viridis)
# --------------------------------------------------------------------------------------- #
# Importar acciones
AAPL=as.data.frame(getSymbols("AAPL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
AMZN=as.data.frame(getSymbols("AMZN" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
MSFT=as.data.frame(getSymbols("MSFT" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
GOOGL=as.data.frame(getSymbols("GOOGL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
# --------------------------------------------------------------------------------------- #
# Se agregan las Fechas como variables
AAPL$Fecha <- row.names(AAPL)
AMZN$Fecha <- row.names(AMZN)
MSFT$Fecha <- row.names(MSFT)
GOOGL$Fecha <- row.names(GOOGL)
colnames(AAPL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(AMZN) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(MSFT) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(GOOGL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
# --------------------------------------------------------------------------------------- #
# Se numeran las filas
rownames(AAPL) = 1:nrow(AAPL)
rownames(AMZN) = 1:nrow(AMZN)
rownames(MSFT) = 1:nrow(MSFT)
rownames(GOOGL) = 1:nrow(GOOGL)
GOOGL$fechas = as.Date(GOOGL$Fecha)
View(GOOGL)
GOOGL$Fecha = as.Date(GOOGL$Fecha)
View(GOOGL)
View(AAPL)
GOOGL$Fecha = as.Date(GOOGL$Fecha)
AAPL$Fecha = as.Date(AAPL$Fecha)
AMZN$Fecha = as.Date(AMZN$Fecha)
MSFT$Fecha = as.Date(MSFT$Fecha)
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-01'] - MSFT$Close[MSFT$Fecha == '2021-01-01'])  / MSFT$Close[MSFT$Fecha == '2021-01-01'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-01'] - GOOGL$Close[GOOGL$Fecha == '2021-01-01'])  / GOOGL$Close[GOOGL$Fecha == '2021-01-01'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-01'] - AAPL$Close[AAPL$Fecha == '2021-01-01'])  / AAPL$Close[AAPL$Fecha == '2021-01-01'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-01'] - AMZN$Close[AMZN$Fecha == '2021-01-01'])  / AMZN$Close[AMZN$Fecha == '2021-01-01'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
bar_plot
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-01'] - MSFT$Close[MSFT$Fecha == '2021-01-01'])  / MSFT$Close[MSFT$Fecha == '2021-01-01'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-01'] - GOOGL$Close[GOOGL$Fecha == '2021-01-01'])  / GOOGL$Close[GOOGL$Fecha == '2021-01-01'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-01'] - AAPL$Close[AAPL$Fecha == '2021-01-01'])  / AAPL$Close[AAPL$Fecha == '2021-01-01'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-01'] - AMZN$Close[AMZN$Fecha == '2021-01-01'])  / AMZN$Close[AMZN$Fecha == '2021-01-01'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
View(GOOGL)
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2021-01-01'])  / MSFT$Close[MSFT$Fecha == '2021-01-01'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2021-01-01'])  / GOOGL$Close[GOOGL$Fecha == '2021-01-01'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2021-01-01'])  / AAPL$Close[AAPL$Fecha == '2021-01-01'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2021-01-01'])  / AMZN$Close[AMZN$Fecha == '2021-01-01'],4)*100
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
bar_plot
runApp()
runApp()
#packages
library(shinyWidgets)
library(lubridate)
#date choices
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)] #removes weekends
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default) #most recent weekday
default
choices
#date choices
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1)
choices
#packages
library(shinyWidgets)
library(lubridate)
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1))
library(shinyWidgets)
library(lubridate)
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1))
choices <- choices[!wday(choices) %in% c(1, 7)] #removes weekends
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default) #most recent weekday
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1))
today()
today() - 1
choices <- seq.Date("2021-01-01", today() - 1, by = 1)
choices <- seq.Date(date("2021-01-01", today() - 1, by = 1))
choices <- seq.Date(as.Date("2004-08-01"), today() - 1, by = 1)
choices
choices <- choices[!wday(choices) %in% c(1, 7)] #removes weekends
choices
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)] #removes weekends
choices
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default) #most recent weekday
runApp()
runApp()
runApp('C:/Users/maxig/Desktop/Carpetas/Trabajos en R/Shiny App Censo/censo.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
round((MSFT$Close[MSFT$Fecha == '2007-05-29'] - MSFT$Close[MSFT$Fecha == '2004-08-19'])  / MSFT$Close[MSFT$Fecha == '2004-08-19'],4)*100
round((AAPL$Close[AAPL$Fecha == '2007-05-29'] - AAPL$Close[AAPL$Fecha == '2004-08-19'])  / AAPL$Close[AAPL$Fecha == '2004-08-19'],4)*100
round((AAPL$Close[AAPL$Fecha == '2019-05-08'] - AAPL$Close[AAPL$Fecha == '2021-05-12'])  / AAPL$Close[AAPL$Fecha == '2021-05-12'],4)*100
round((AAPL$Close[AAPL$Fecha == '2021-05-12'] - AAPL$Close[AAPL$Fecha == '2019-05-08'])  / AAPL$Close[AAPL$Fecha == '2019-05-08'],4)*100
round((AAPL$Close[AAPL$Fecha == '2017-05-18'] - AAPL$Close[AAPL$Fecha == '2012-01-16'])  / AAPL$Close[AAPL$Fecha == '2012-01-16'],4)*100
View(GOOGL)
runApp()
runApp()
runApp()
runApp()
library(corrplot)
library(quantmod)
library(highcharter)
library(tidyr)
library(miscset)
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(crayon)
library(modeest)
library(readxl)
library(plotly)
library(ggthemes)
library(reshape)
library(viridisLite)
library(viridis)
library(lubridate)
library(shiny)
library(shinyWidgets)
# --------------------------------------------------------------------------------------- #
# Importar acciones
AAPL=as.data.frame(getSymbols("AAPL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
AMZN=as.data.frame(getSymbols("AMZN" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
MSFT=as.data.frame(getSymbols("MSFT" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
GOOGL=as.data.frame(getSymbols("GOOGL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
# --------------------------------------------------------------------------------------- #
# Se agregan las Fechas como variables
AAPL$Fecha <- row.names(AAPL)
AMZN$Fecha <- row.names(AMZN)
MSFT$Fecha <- row.names(MSFT)
GOOGL$Fecha <- row.names(GOOGL)
# --------------------------------------------------------------------------------------- #
# Se mofidican las columnas
colnames(AAPL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(AMZN) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(MSFT) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(GOOGL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
# --------------------------------------------------------------------------------------- #
# Se numeran las filas
rownames(AAPL) = 1:nrow(AAPL)
rownames(AMZN) = 1:nrow(AMZN)
rownames(MSFT) = 1:nrow(MSFT)
rownames(GOOGL) = 1:nrow(GOOGL)
# --------------------------------------------------------------------------------------- #
# Fechas formatos
GOOGL$fechas = as.Date(paste(GOOGL$date,"-01",sep=""))
MSFT$fechas = as.Date(paste(MSFT$date,"-01",sep=""))
AAPL$fechas = as.Date(paste(AAPL$date,"-01",sep=""))
AMZN$fechas = as.Date(paste(AMZN$date,"-01",sep=""))
# --------------------------------------------------------------------------------------- #
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
# --------------------------------------------------------------------------------------- #
# Editando las fechas
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)]
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default)
runApp()
runApp()
# Librerias
library(corrplot)
library(quantmod)
library(highcharter)
library(tidyr)
library(miscset)
library(ggplot2)
library(readr)
library(dplyr)
library(plotly)
library(crayon)
library(modeest)
library(readxl)
library(plotly)
library(ggthemes)
library(reshape)
library(viridisLite)
library(viridis)
library(shinyWidgets)
library(lubridate)
# --------------------------------------------------------------------------------------- #
# Importar acciones
AAPL=as.data.frame(getSymbols("AAPL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
AMZN=as.data.frame(getSymbols("AMZN" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
MSFT=as.data.frame(getSymbols("MSFT" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
GOOGL=as.data.frame(getSymbols("GOOGL" , src = 'yahoo', auto.assign = F, from = "2004-08-19", to = Sys.Date(), periodicity = "daily"))
# --------------------------------------------------------------------------------------- #
# Se agregan las Fechas como variables
AAPL$Fecha <- row.names(AAPL)
AMZN$Fecha <- row.names(AMZN)
MSFT$Fecha <- row.names(MSFT)
GOOGL$Fecha <- row.names(GOOGL)
# --------------------------------------------------------------------------------------- #
# Se mofidican las columnas
colnames(AAPL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(AMZN) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(MSFT) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
colnames(GOOGL) = c("Open", "High", "Low", "Close", "Volumen", "Ajustado", "Fecha")
# --------------------------------------------------------------------------------------- #
# Se numeran las filas
rownames(AAPL) = 1:nrow(AAPL)
rownames(AMZN) = 1:nrow(AMZN)
rownames(MSFT) = 1:nrow(MSFT)
rownames(GOOGL) = 1:nrow(GOOGL)
# --------------------------------------------------------------------------------------- #
# Fechas formatos
GOOGL$Fecha = as.Date(GOOGL$Fecha)
AAPL$Fecha = as.Date(AAPL$Fecha)
AMZN$Fecha = as.Date(AMZN$Fecha)
MSFT$Fecha = as.Date(MSFT$Fecha)
# --------------------------------------------------------------------------------------- #
# Se crean variables las variaciones % de los ultimos 5 dias
MSFTdis = round( ( MSFT$Close[length(MSFT$Close)] - MSFT$Close[length(MSFT$Close) - 5] ) / MSFT$Close[length(MSFT$Close) - 5] ,4)*100
GOOGLdis = round( ( GOOGL$Close[length(GOOGL$Close)] - GOOGL$Close[length(GOOGL$Close) - 5] ) / GOOGL$Close[length(GOOGL$Close) - 5] ,4)*100
AAPLdis = round( ( AAPL$Close[length(AAPL$Close)] - AAPL$Close[length(AAPL$Close) - 5] ) / AAPL$Close[length(AAPL$Close) - 5] ,4)*100
AMZNdis = round( ( AMZN$Close[length(AMZN$Close)] - AMZN$Close[length(AMZN$Close) - 5] ) / AMZN$Close[length(AMZN$Close) - 5] ,4)*100
# --------------------------------------------------------------------------------------- #
# Se crea un data frame con los valores de las variaciones
acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Distancias = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(acciones, Distancias) %>% arrange(-Distancias)
View(df)
GOOGL$fechas = as.Date(paste(GOOGL$date,"-01",sep=""))
MSFT$fechas = as.Date(paste(MSFT$date,"-01",sep=""))
AAPL$fechas = as.Date(paste(AAPL$date,"-01",sep=""))
AMZN$fechas = as.Date(paste(AMZN$date,"-01",sep=""))
# --------------------------------------------------------------------------------------- #
# Data Frame promedio mensual
AAPL_MES = AAPL %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
AMZN_MES = AMZN %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
MSFT_MES = MSFT %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
GOOGL_MES = GOOGL %>% select(Close, Volumen, fechas) %>% group_by(fechas) %>% summarise(volumen = mean(Volumen),
precio = mean(Close))
# --------------------------------------------------------------------------------------- #
MSFTdis = round((MSFT$Close[MSFT$Fecha == '2022-01-04'] - MSFT$Close[MSFT$Fecha == '2020-09-24'])  / MSFT$Close[MSFT$Fecha == '2020-09-24'],4)*100
GOOGLdis = round((GOOGL$Close[GOOGL$Fecha == '2022-01-04'] - GOOGL$Close[GOOGL$Fecha == '2020-09-24'])  / GOOGL$Close[GOOGL$Fecha == '2020-09-24'],4)*100
AAPLdis = round((AAPL$Close[AAPL$Fecha == '2022-01-04'] - AAPL$Close[AAPL$Fecha == '2020-09-24'])  / AAPL$Close[AAPL$Fecha == '2020-09-24'],4)*100
AMZNdis = round((AMZN$Close[AMZN$Fecha == '2022-01-04'] - AMZN$Close[AMZN$Fecha == '2020-09-24'])  / AMZN$Close[AMZN$Fecha == '2020-09-24'],4)*100
Acciones = c(
"GOOGL",
"MSFT",
"AAPL",
"AMZN")
Variacion = c(
GOOGLdis,
MSFTdis,
AAPLdis,
AMZNdis)
df = data.frame(Acciones, Variacion) %>% arrange(-Variacion)
# --------------------------------------------------------------------------------------- #
# Grafico de barras de prueba
custom = viridis::mako(n = 4)
bar_plot = df %>%
arrange(desc(Variacion)) %>%
hchart('column', hcaes(x = Acciones, y = Variacion, color = custom)) %>%
hc_add_theme(hc_theme_flatdark()) %>%
hc_tooltip(pointFormat = '<b>Variacion %: </b> {point.y} <br> ' ) %>%
hc_title(text = 'Acciones Tecnologicas',
style = list(fontSize = '25px', fontWeight = 'bold')) %>%
hc_subtitle(text = 'Dinamica',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_credits(enabled = TRUE, text = '@MGaloto',
style = list(fontSize = '16px', color = "#ffffff")) %>%
hc_yAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff") %>%
hc_xAxis(labels = list(style = list(color = "#ffffff")),
tickColor = "#ffffff")
bar_plot
choices <- seq.Date(as.Date("2004-08-19"), today() - 1, by = 1)
choices <- choices[!wday(choices) %in% c(1, 7)]
default <- seq.Date(today() - 182, today() - 180, by = 1)
default <- default[!wday(default) %in% c(1, 7)]
default <- max(default)
round((AAPL$Close[AAPL$Fecha == '2017-05-18'] - AAPL$Close[AAPL$Fecha == '2012-01-16'])  / AAPL$Close[AAPL$Fecha == '2012-01-16'],4)*100
runApp()
runApp()
runApp()
